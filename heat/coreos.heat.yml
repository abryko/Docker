#
##
### Written by the CAT team
##
#
heat_template_version: 2013-05-23


description: CoreOS stack for Cloudwatt


parameters:
  keypair_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string

  os_username:
    description: OpenStack Username
    label: OpenStack Username
    type: string

  os_password:
    description: OpenStack Password
    label: OpenStack Password
    type: string

  os_tenant:
    description: OpenStack Tenant Name
    label: OpenStack Tenant Name
    type: string

  os_auth:
    description: OpenStack Auth URL
    default: https://identity.fr1.cloudwatt.com/v2.0
    label: OpenStack Auth URL
    type: string

  domain:
    description: Wildcarded domain, ex example.com must have a *.example.com DNS entry
    label: Cloud DNS
    type: string

  flavor_name:
    default: n1.cw.standard-4
    description: Flavor to use for the deployed instance
    type: string
    label: Instance Type (Flavor)
    constraints:
      - allowed_values:
          - s1.cw.small-1
          - n1.cw.standard-1
          - n1.cw.standard-2
          - n1.cw.standard-4
          - n1.cw.standard-8
          - n1.cw.standard-12
          - n1.cw.standard-16

  volume_size:
      type: number
      description: Size of volume to attach to instance
      default: 10
      constraints:
        - range: { min: 10, max: 1000 }


resources:
  network:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      ip_version: 4
      cidr: 10.0.1.0/24
      allocation_pools:
        - { start: 10.0.1.100, end: 10.0.1.199 }

  router:
    type: OS::Neutron::Router

  toolbox_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { direction: ingress }
        - { direction: egress }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: 6ea98324-0f14-49f6-97c0-885d1b8dc517

  ports:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      security_groups:
        - { get_resource: security_group }

  server:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: keypair_name }
      image: 811c20f7-ad34-4401-85a9-72b9f921a0dd
      flavor: { get_param: flavor_name }
      user_data_format: RAW
      networks:
        - port: { get_resource: ports }
      user_data:
        str_replace:
          params:
            $private_ipv4: { get_attr: [ ports, fixed_ips, 0, ip_address ] }
            $public_ipv4: { get_attr: [floating_ip, floating_ip_address] }
            $domain: { get_param: domain }
            $os_username: { get_param: os_username }
            $os_password: { get_param: os_password }
            $os_tenant: { get_param: os_tenant }
            $os_auth: { get_param: os_auth }
          template: |
            #cloud-config
            write_files:
              - path: /home/core/init-drive.sh
                permissions: 0700
                owner: "root:root"
                content: |
                  #!/bin/bash
                  if [[ ! $(blkid -o value -s TYPE /dev/vdb) == "ext4" ]]; then
                      /usr/sbin/mkfs.ext4 /dev/vdb
                  fi
              - path: /etc/environment
                permissions: 0644
                owner: "root:root"
                content: |
                  COREOS_PRIVATE_IPV4=$private_ipv4
                  COREOS_PUBLIC_IPV4=$public_ipv4
                  ETCD_ADDR=$private_ipv4:2379
                  ETCD_PEER_ADDR=$private_ipv4:2380
                  TOOLBOX_DOMAIN=$domain
            coreos:
              etcd2:
                name: "%H"
                advertise-client-urls: http://$private_ipv4:2379
                initial-advertise-peer-urls: http://$private_ipv4:2380
                initial-cluster: "%H=http://$private_ipv4:2380"
                listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
                listen-peer-urls: http://$private_ipv4:2380
              units:
                - name: format-data.service
                  command: start
                  content: |
                    [Unit]
                    Before=docker.service data.mount
                    ConditionPathExists=/dev/vdb

                    [Service]
                    Type=oneshot
                    ExecStart=/home/core/init-drive.sh
                - name: data.mount
                  command: start
                  content: |
                    [Unit]
                    Before=docker.service
                    After=format-data.service
                    Requires=format-data.service

                    [Mount]
                    What=/dev/vdb
                    Where=/data
                    Type=ext4
                - name: generatekey.service
                  command: start
                  content: |
                    [Unit]
                    ConditionPathExists=!/home/core/keys/key
                    Description=Toolbox KeyPair Generator

                    [Service]
                    Type=oneshot
                    ExecStartPre=-/usr/bin/mkdir /home/core/keys
                    ExecStart=/usr/bin/ssh-keygen -t rsa -f /home/core/keys/key -N ""
                - name: docker-tcp.socket
                  command: start
                  enable: true
                  content: |
                    [Unit]
                    Description=Docker Socket for the API

                    [Socket]
                    ListenStream=2375
                    BindIPv6Only=both
                    Service=docker.service

                    [Install]
                    WantedBy=sockets.target
                - name: etcd2.service
                  command: start
                - name: rabbitmq.service
                  command: start
                  content: |
                    [Unit]
                    Description=RabbitMQ Server
                    After=docker.service
                    Requires=docker.service

                    [Service]
                    TimeoutStartSec=0
                    Environment=/etc/environment
                    ExecStartPre=-/usr/bin/docker kill rabbitmq
                    ExecStartPre=-/usr/bin/docker rm rabbitmq
                    ExecStartPre=/usr/bin/docker pull rabbitmq:3-management
                    ExecStart=/usr/bin/docker run --name rabbitmq -e VIRTUAL_HOST=rabbitmq.$domain -e VIRTUAL_PORT=15672 rabbitmq:3-management
                    ExecStop=/usr/bin/docker stop rabbitmq
                - name: nginxproxy.service
                  command: start
                  content: |
                    [Unit]
                    Description=Docker Nginx Proxy
                    After=docker.service
                    Requires=docker.service

                    [Service]
                    TimeoutStartSec=0
                    ExecStartPre=-/usr/bin/docker kill proxy
                    ExecStartPre=-/usr/bin/docker rm proxy
                    ExecStartPre=-/usr/bin/docker pull jwilder/nginx-proxy
                    ExecStart=/usr/bin/docker run --name=proxy -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy
                    ExecStop=/usr/bin/docker stop proxy
                - name: openvpn-init.service
                  command: start
                  content: |
                    [Unit]
                    Description=Toolbox VPN Init
                    After=docker.service
                    Requires=docker.service
                    Before=openvpn.service
                    ConditionPathExists=!/home/core/vpn/openvpn.conf

                    [Service]
                    Type=oneshot
                    TimeoutStartSec=0
                    Environment=/etc/environment
                    ExecStart=/usr/bin/docker run -v /home/core/vpn:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -s 10.0.2.0/24 -u udp://$public_ipv4 -n $private_ipv4 -n 8.8.8.8 -n 8.8.4.4
                    ExecStart=/usr/bin/docker run -v /home/core/vpn:/etc/openvpn -e "EASYRSA_BATCH=1" -e "EASYRSA_REQ_CN=$domain" --rm kylemanna/openvpn ovpn_initpki nopass
                    ExecStart=/usr/bin/docker run -v /home/core/vpn:/etc/openvpn --rm kylemanna/openvpn easyrsa build-client-full cloud nopass
                    ExecStart=/bin/bash -c "/usr/bin/docker run -v /home/core/vpn:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient cloud > /home/core/cloud.ovpn"
                - name: openvpn.service
                  command: start
                  content: |
                    [Unit]
                    Description=Toolbox VPN
                    After=docker.service openvpn-init.service
                    Requires=docker.service openvpn-init.service

                    [Service]
                    TimeoutStartSec=0
                    Environment=/etc/environment
                    ExecStartPre=-/usr/bin/docker kill openvpn
                    ExecStartPre=-/usr/bin/docker rm openvpn
                    ExecStartPre=/usr/bin/docker pull kylemanna/openvpn
                    ExecStart=/usr/bin/docker run -v /home/core/vpn:/etc/openvpn --name=openvpn -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn
                    ExecStop=/usr/bin/docker stop openvpn
                - name: toolboxui.service
                  command: start
                  content: |
                    [Unit]
                    Description=Toolbox UI
                    After=rabbitmq.service
                    Requires=rabbitmq.service

                    [Service]
                    TimeoutStartSec=0
                    Environment=/etc/environment
                    ExecStartPre=-/usr/bin/docker kill toolboxui
                    ExecStartPre=-/usr/bin/docker rm toolboxui
                    ExecStartPre=/usr/bin/docker pull cloudwattfr/toolboxui
                    ExecStart=/usr/bin/docker run --link rabbitmq:rabbitmq --name toolboxui -e VIRTUAL_HOST=console.$domain -e DOMAIN=$domain -e VIRTUAL_PORT=3000  \
                     -e OS_USERNAME=$os_username \
                     -e OS_PASSWORD=$os_password \
                     -e OS_TENANT_NAME=$os_tenant \
                     -e OS_AUTH_URL=$os_auth \
                     -p 3000:3000 \
                     -v /home/core/keys/key.pub:/keypair.pub \
                     cloudwattfr/toolboxui $private_ipv4 $public_ipv4
                    ExecStop=/usr/bin/docker stop toolboxui



  volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      description: Volume for stack

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: volume }
      instance_uuid: { get_resource: server }

  floating_ip_link:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: server }

outputs:
  floating_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [floating_ip, floating_ip_address] }
